/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC721,
  ERC721Interface,
} from "../../../contracts/SBT_DEMO.sol/ERC721";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
        ],
        indexed: false,
        internalType: "struct ERC721.NFT",
        name: "id",
        type: "tuple",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "_getNFT",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
        ],
        internalType: "struct ERC721.NFT[]",
        name: "nfts_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "checkIsMinted",
    outputs: [
      {
        internalType: "bool[]",
        name: "",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "isMint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506116f0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c57806399f110101161006657806399f1101014610248578063a22cb46514610278578063b88d4fde14610294578063e985e9c5146102b0576100cf565b80636352211e146101b85780636e13bd20146101e857806370a0823114610218576100cf565b806301ffc9a7146100d457806305bde45e14610104578063081812fc14610134578063095ea7b31461016457806323b872dd1461018057806342842e0e1461019c575b600080fd5b6100ee60048036038101906100e99190610c58565b6102e0565b6040516100fb9190610ca0565b60405180910390f35b61011e60048036038101906101199190610d4f565b6103b2565b60405161012b9190610ca0565b60405180910390f35b61014e60048036038101906101499190610d8f565b6103e1565b60405161015b9190610dcb565b60405180910390f35b61017e60048036038101906101799190610d4f565b6103e8565b005b61019a60048036038101906101959190610de6565b6103ec565b005b6101b660048036038101906101b19190610de6565b610460565b005b6101d260048036038101906101cd9190610d8f565b610598565b6040516101df9190610dcb565b60405180910390f35b61020260048036038101906101fd9190610e39565b61059f565b60405161020f9190610f24565b60405180910390f35b610232600480360381019061022d9190610e39565b61069b565b60405161023f9190610f55565b60405180910390f35b610262600480360381019061025d9190610e39565b610752565b60405161026f9190611128565b60405180910390f35b610292600480360381019061028d9190611176565b61091d565b005b6102ae60048036038101906102a9919061121b565b610a1a565b005b6102ca60048036038101906102c591906112a3565b610bc7565b6040516102d79190610ca0565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103ab57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6000919050565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290611340565b60405180910390fd5b505050565b61046b8383836103ec565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610554575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b81526004016104f093929190611397565b6020604051808303816000875af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906113f6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a9061146f565b60405180910390fd5b505050565b6000919050565b60606000600367ffffffffffffffff8111156105be576105bd61148f565b5b6040519080825280602002602001820160405280156105ec5781602001602082028036833780820191505090505b50905060005b600381101561069157600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff1682828151811061066c5761066b6114be565b5b60200260200101901515908115158152505080806106899061151c565b9150506105f2565b5080915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361070b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610702906115b0565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109125783829060005260206000209060030201604051806060016040529081600082015481526020016001820180546107ef906115ff565b80601f016020809104026020016040519081016040528092919081815260200182805461081b906115ff565b80156108685780601f1061083d57610100808354040283529160200191610868565b820191906000526020600020905b81548152906001019060200180831161084b57829003601f168201915b50505050508152602001600282018054610881906115ff565b80601f01602080910402602001604051908101604052809291908181526020018280546108ad906115ff565b80156108fa5780601f106108cf576101008083540402835291602001916108fa565b820191906000526020600020905b8154815290600101906020018083116108dd57829003601f168201915b505050505081525050815260200190600101906107b2565b505050509050919050565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610a0e9190610ca0565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8090611340565b60405180910390fd5b610a948585856103ec565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480610b81575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401610b1d95949392919061166c565b6020604051808303816000875af1158015610b3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6091906113f6565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb79061146f565b60405180910390fd5b5050505050565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610c3581610c00565b8114610c4057600080fd5b50565b600081359050610c5281610c2c565b92915050565b600060208284031215610c6e57610c6d610bf6565b5b6000610c7c84828501610c43565b91505092915050565b60008115159050919050565b610c9a81610c85565b82525050565b6000602082019050610cb56000830184610c91565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce682610cbb565b9050919050565b610cf681610cdb565b8114610d0157600080fd5b50565b600081359050610d1381610ced565b92915050565b6000819050919050565b610d2c81610d19565b8114610d3757600080fd5b50565b600081359050610d4981610d23565b92915050565b60008060408385031215610d6657610d65610bf6565b5b6000610d7485828601610d04565b9250506020610d8585828601610d3a565b9150509250929050565b600060208284031215610da557610da4610bf6565b5b6000610db384828501610d3a565b91505092915050565b610dc581610cdb565b82525050565b6000602082019050610de06000830184610dbc565b92915050565b600080600060608486031215610dff57610dfe610bf6565b5b6000610e0d86828701610d04565b9350506020610e1e86828701610d04565b9250506040610e2f86828701610d3a565b9150509250925092565b600060208284031215610e4f57610e4e610bf6565b5b6000610e5d84828501610d04565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610e9b81610c85565b82525050565b6000610ead8383610e92565b60208301905092915050565b6000602082019050919050565b6000610ed182610e66565b610edb8185610e71565b9350610ee683610e82565b8060005b83811015610f17578151610efe8882610ea1565b9750610f0983610eb9565b925050600181019050610eea565b5085935050505092915050565b60006020820190508181036000830152610f3e8184610ec6565b905092915050565b610f4f81610d19565b82525050565b6000602082019050610f6a6000830184610f46565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610fa581610d19565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fe5578082015181840152602081019050610fca565b60008484015250505050565b6000601f19601f8301169050919050565b600061100d82610fab565b6110178185610fb6565b9350611027818560208601610fc7565b61103081610ff1565b840191505092915050565b60006060830160008301516110536000860182610f9c565b506020830151848203602086015261106b8282611002565b915050604083015184820360408601526110858282611002565b9150508091505092915050565b600061109e838361103b565b905092915050565b6000602082019050919050565b60006110be82610f70565b6110c88185610f7b565b9350836020820285016110da85610f8c565b8060005b8581101561111657848403895281516110f78582611092565b9450611102836110a6565b925060208a019950506001810190506110de565b50829750879550505050505092915050565b6000602082019050818103600083015261114281846110b3565b905092915050565b61115381610c85565b811461115e57600080fd5b50565b6000813590506111708161114a565b92915050565b6000806040838503121561118d5761118c610bf6565b5b600061119b85828601610d04565b92505060206111ac85828601611161565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126111db576111da6111b6565b5b8235905067ffffffffffffffff8111156111f8576111f76111bb565b5b602083019150836001820283011115611214576112136111c0565b5b9250929050565b60008060008060006080868803121561123757611236610bf6565b5b600061124588828901610d04565b955050602061125688828901610d04565b945050604061126788828901610d3a565b935050606086013567ffffffffffffffff81111561128857611287610bfb565b5b611294888289016111c5565b92509250509295509295909350565b600080604083850312156112ba576112b9610bf6565b5b60006112c885828601610d04565b92505060206112d985828601610d04565b9150509250929050565b600082825260208201905092915050565b7f5342540000000000000000000000000000000000000000000000000000000000600082015250565b600061132a6003836112e3565b9150611335826112f4565b602082019050919050565b600060208201905081810360008301526113598161131d565b9050919050565b600082825260208201905092915050565b50565b6000611381600083611360565b915061138c82611371565b600082019050919050565b60006080820190506113ac6000830186610dbc565b6113b96020830185610dbc565b6113c66040830184610f46565b81810360608301526113d781611374565b9050949350505050565b6000815190506113f081610c2c565b92915050565b60006020828403121561140c5761140b610bf6565b5b600061141a848285016113e1565b91505092915050565b7f756e7361666520726563697069656e7400000000000000000000000000000000600082015250565b60006114596010836112e3565b915061146482611423565b602082019050919050565b600060208201905081810360008301526114888161144c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061152782610d19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611559576115586114ed565b5b600182019050919050565b7f6f776e6572203d207a65726f2061646472657373000000000000000000000000600082015250565b600061159a6014836112e3565b91506115a582611564565b602082019050919050565b600060208201905081810360008301526115c98161158d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061161757607f821691505b60208210810361162a576116296115d0565b5b50919050565b82818337600083830152505050565b600061164b8385611360565b9350611658838584611630565b61166183610ff1565b840190509392505050565b60006080820190506116816000830188610dbc565b61168e6020830187610dbc565b61169b6040830186610f46565b81810360608301526116ae81848661163f565b9050969550505050505056fea264697066735822122006cdc52b5cacb00e85401a4c3d01b706317ecdd320ca8616a8a5bdfb536408e564736f6c63430008110033";

type ERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721__factory extends ContractFactory {
  constructor(...args: ERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721> {
    return super.deploy(overrides || {}) as Promise<ERC721>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC721 {
    return super.attach(address) as ERC721;
  }
  override connect(signer: Signer): ERC721__factory {
    return super.connect(signer) as ERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721Interface {
    return new utils.Interface(_abi) as ERC721Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC721 {
    return new Contract(address, _abi, signerOrProvider) as ERC721;
  }
}
