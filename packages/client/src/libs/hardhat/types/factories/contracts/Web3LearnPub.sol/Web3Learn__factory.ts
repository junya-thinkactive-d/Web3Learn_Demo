/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Web3Learn,
  Web3LearnInterface,
} from "../../../contracts/Web3LearnPub.sol/Web3Learn";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "Buy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "SetSplit",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "ratio",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "payee",
            type: "address",
          },
        ],
        internalType: "struct Web3Learn.Split[]",
        name: "splits",
        type: "tuple[]",
      },
    ],
    name: "_checkRatio",
    outputs: [
      {
        internalType: "bool",
        name: "isValid_",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "_getReward",
    outputs: [
      {
        internalType: "uint256",
        name: "canClaimAmount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "_isWhitelistedToken",
    outputs: [
      {
        internalType: "bool",
        name: "isWhitelisted_",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "ratio",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "payee",
            type: "address",
          },
        ],
        internalType: "struct Web3Learn.Split[]",
        name: "splits",
        type: "tuple[]",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removeWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061188e806100696000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610111578063d647fc241461012f578063f80f5dd51461015f578063fe537ca21461017b57610088565b8063174e31c41461008d5780633187a287146100a95780634be98f94146100c557806378c8cda7146100f5575b600080fd5b6100a760048036038101906100a29190610eb5565b6101ab565b005b6100c360048036038101906100be91906110a3565b610273565b005b6100df60048036038101906100da9190611112565b610505565b6040516100ec9190611161565b60405180910390f35b61010f600480360381019061010a919061117c565b61058c565b005b610119610641565b60405161012691906111ca565b60405180910390f35b610149600480360381019061014491906111e5565b610667565b6040516101569190611249565b60405180910390f35b6101796004803603810190610174919061117c565b6106c0565b005b6101956004803603810190610190919061117c565b610775565b6040516101a29190611249565b60405180910390f35b6101b36107cb565b6101bd3383610505565b8111156101c957600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102559190611293565b9250508190555061026782338361081a565b61026f6108a0565b5050565b61027b6107cb565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102d157600080fd5b7335d831f79e54f6b7abd3d324822de9084f00e27b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a90611324565b60405180910390fd5b61035c81610667565b61036557600080fd5b600030905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016103a59190611353565b602060405180830381865afa1580156103c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e69190611383565b90506103f4843384886108aa565b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040161042f9190611353565b602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190611383565b9050600082826104809190611293565b905061048d868287610933565b868673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f251183b9c2b842c80f376686f0f21acd10da77772f5eef8eb0de739a35220c3060016040516104ec9190611249565b60405180910390a4505050506105006108a0565b505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e657600080fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080825190506000805b828110156106b15784818151811061068d5761068c6113b0565b5b602002602001015160000151826106a491906113df565b9150806001019050610672565b50612710811492505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071a57600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600260005403610810576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108079061145f565b60405180910390fd5b6002600081905550565b61089b8363a9059cbb60e01b848460405160240161083992919061147f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b79565b505050565b6001600081905550565b61092d846323b872dd60e01b8585856040516024016108cb939291906114a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b79565b50505050565b6000815190506000805b82811015610ac457600061271085838151811061095d5761095c6113b0565b5b6020026020010151600001518761097491906114df565b61097e9190611550565b90508060036000878581518110610998576109976113b0565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a2a91906113df565b925050819055508083610a3d91906113df565b9250816001019150808773ffffffffffffffffffffffffffffffffffffffff16868481518110610a7057610a6f6113b0565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff167fc63b194ef2132e5904173b81b08d724b4a89cbea7cccc6faf99f5e2c33f2a68360405160405180910390a45061093d565b5060008185610ad39190611293565b905060008114610b715780600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b6991906113df565b925050819055505b505050505050565b6000610bdb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610c409092919063ffffffff16565b9050600081511115610c3b5780806020019051810190610bfb91906115ad565b610c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c319061164c565b60405180910390fd5b5b505050565b6060610c4f8484600085610c58565b90509392505050565b606082471015610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c94906116de565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610cc6919061176f565b60006040518083038185875af1925050503d8060008114610d03576040519150601f19603f3d011682016040523d82523d6000602084013e610d08565b606091505b5091509150610d1987838387610d25565b92505050949350505050565b60608315610d87576000835103610d7f57610d3f85610d9a565b610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d75906117d2565b60405180910390fd5b5b829050610d92565b610d918383610dbd565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610dd05781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e049190611836565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e4c82610e21565b9050919050565b610e5c81610e41565b8114610e6757600080fd5b50565b600081359050610e7981610e53565b92915050565b6000819050919050565b610e9281610e7f565b8114610e9d57600080fd5b50565b600081359050610eaf81610e89565b92915050565b60008060408385031215610ecc57610ecb610e17565b5b6000610eda85828601610e6a565b9250506020610eeb85828601610ea0565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f4382610efa565b810181811067ffffffffffffffff82111715610f6257610f61610f0b565b5b80604052505050565b6000610f75610e0d565b9050610f818282610f3a565b919050565b600067ffffffffffffffff821115610fa157610fa0610f0b565b5b602082029050602081019050919050565b600080fd5b600080fd5b600060408284031215610fd257610fd1610fb7565b5b610fdc6040610f6b565b90506000610fec84828501610ea0565b600083015250602061100084828501610e6a565b60208301525092915050565b600061101f61101a84610f86565b610f6b565b9050808382526020820190506040840283018581111561104257611041610fb2565b5b835b8181101561106b57806110578882610fbc565b845260208401935050604081019050611044565b5050509392505050565b600082601f83011261108a57611089610ef5565b5b813561109a84826020860161100c565b91505092915050565b6000806000606084860312156110bc576110bb610e17565b5b60006110ca86828701610ea0565b93505060206110db86828701610e6a565b925050604084013567ffffffffffffffff8111156110fc576110fb610e1c565b5b61110886828701611075565b9150509250925092565b6000806040838503121561112957611128610e17565b5b600061113785828601610e6a565b925050602061114885828601610e6a565b9150509250929050565b61115b81610e7f565b82525050565b60006020820190506111766000830184611152565b92915050565b60006020828403121561119257611191610e17565b5b60006111a084828501610e6a565b91505092915050565b60006111b482610e21565b9050919050565b6111c4816111a9565b82525050565b60006020820190506111df60008301846111bb565b92915050565b6000602082840312156111fb576111fa610e17565b5b600082013567ffffffffffffffff81111561121957611218610e1c565b5b61122584828501611075565b91505092915050565b60008115159050919050565b6112438161122e565b82525050565b600060208201905061125e600083018461123a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061129e82610e7f565b91506112a983610e7f565b92508282039050818111156112c1576112c0611264565b5b92915050565b600082825260208201905092915050565b7f496e76616c696420546f6b656e00000000000000000000000000000000000000600082015250565b600061130e600d836112c7565b9150611319826112d8565b602082019050919050565b6000602082019050818103600083015261133d81611301565b9050919050565b61134d81610e41565b82525050565b60006020820190506113686000830184611344565b92915050565b60008151905061137d81610e89565b92915050565b60006020828403121561139957611398610e17565b5b60006113a78482850161136e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006113ea82610e7f565b91506113f583610e7f565b925082820190508082111561140d5761140c611264565b5b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611449601f836112c7565b915061145482611413565b602082019050919050565b600060208201905081810360008301526114788161143c565b9050919050565b60006040820190506114946000830185611344565b6114a16020830184611152565b9392505050565b60006060820190506114bd6000830186611344565b6114ca6020830185611344565b6114d76040830184611152565b949350505050565b60006114ea82610e7f565b91506114f583610e7f565b925082820261150381610e7f565b9150828204841483151761151a57611519611264565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061155b82610e7f565b915061156683610e7f565b92508261157657611575611521565b5b828204905092915050565b61158a8161122e565b811461159557600080fd5b50565b6000815190506115a781611581565b92915050565b6000602082840312156115c3576115c2610e17565b5b60006115d184828501611598565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611636602a836112c7565b9150611641826115da565b604082019050919050565b6000602082019050818103600083015261166581611629565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006116c86026836112c7565b91506116d38261166c565b604082019050919050565b600060208201905081810360008301526116f7816116bb565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611732578082015181840152602081019050611717565b60008484015250505050565b6000611749826116fe565b6117538185611709565b9350611763818560208601611714565b80840191505092915050565b600061177b828461173e565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006117bc601d836112c7565b91506117c782611786565b602082019050919050565b600060208201905081810360008301526117eb816117af565b9050919050565b600081519050919050565b6000611808826117f2565b61181281856112c7565b9350611822818560208601611714565b61182b81610efa565b840191505092915050565b6000602082019050818103600083015261185081846117fd565b90509291505056fea2646970667358221220894f7a2637b019ce515b5480e4c104c1a4dae71afc3f3cc042c8c1df25d088c464736f6c63430008110033";

type Web3LearnConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Web3LearnConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Web3Learn__factory extends ContractFactory {
  constructor(...args: Web3LearnConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Web3Learn> {
    return super.deploy(overrides || {}) as Promise<Web3Learn>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Web3Learn {
    return super.attach(address) as Web3Learn;
  }
  override connect(signer: Signer): Web3Learn__factory {
    return super.connect(signer) as Web3Learn__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Web3LearnInterface {
    return new utils.Interface(_abi) as Web3LearnInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Web3Learn {
    return new Contract(address, _abi, signerOrProvider) as Web3Learn;
  }
}
