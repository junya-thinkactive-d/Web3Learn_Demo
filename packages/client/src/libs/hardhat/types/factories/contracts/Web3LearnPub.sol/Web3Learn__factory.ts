/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Web3Learn,
  Web3LearnInterface,
} from "../../../contracts/Web3LearnPub.sol/Web3Learn";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "Buy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "SetSplit",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "ratio",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "payee",
            type: "address",
          },
        ],
        internalType: "struct Web3Learn.Split[]",
        name: "splits",
        type: "tuple[]",
      },
    ],
    name: "_checkRatio",
    outputs: [
      {
        internalType: "bool",
        name: "isValid_",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "_getReward",
    outputs: [
      {
        internalType: "uint256",
        name: "canClaimAmount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "_isWhitelistedToken",
    outputs: [
      {
        internalType: "bool",
        name: "isWhitelisted_",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "ratio",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "payee",
            type: "address",
          },
        ],
        internalType: "struct Web3Learn.Split[]",
        name: "splits",
        type: "tuple[]",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimReard",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removeWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611838806100696000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610111578063d647fc241461012f578063f80f5dd51461015f578063fe537ca21461017b57610088565b80633187a2871461008d5780634be98f94146100a957806378c8cda7146100d957806380355aa1146100f5575b600080fd5b6100a760048036038101906100a2919061100d565b6101ab565b005b6100c360048036038101906100be919061107c565b6103e7565b6040516100d091906110cb565b60405180910390f35b6100f360048036038101906100ee91906110e6565b61046e565b005b61010f600480360381019061010a9190611113565b610523565b005b6101196105eb565b6040516101269190611174565b60405180910390f35b6101496004803603810190610144919061118f565b610611565b60405161015691906111f3565b60405180910390f35b610179600480360381019061017491906110e6565b61066a565b005b610195600480360381019061019091906110e6565b61071f565b6040516101a291906111f3565b60405180910390f35b6101b3610775565b7335d831f79e54f6b7abd3d324822de9084f00e27b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022c9061126b565b60405180910390fd5b61023e81610611565b61024757600080fd5b600030905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401610287919061129a565b602060405180830381865afa1580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c891906112ca565b90506102d6843384886107c4565b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610311919061129a565b602060405180830381865afa15801561032e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035291906112ca565b9050600082826103629190611326565b905061036f86828761084d565b868673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f251183b9c2b842c80f376686f0f21acd10da77772f5eef8eb0de739a35220c3060016040516103ce91906111f3565b60405180910390a4505050506103e2610a93565b505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c857600080fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b61052b610775565b61053533836103e7565b81111561054157600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105cd9190611326565b925050819055506105df823383610a9d565b6105e7610a93565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080825190506000805b8281101561065b578481815181106106375761063661135a565b5b6020026020010151600001518261064e9190611389565b915080600101905061061c565b50612710811492505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c457600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6002600054036107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b190611409565b60405180910390fd5b6002600081905550565b610847846323b872dd60e01b8585856040516024016107e593929190611429565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b23565b50505050565b6000815190506000805b828110156109de5760006127108583815181106108775761087661135a565b5b6020026020010151600001518761088e9190611460565b61089891906114d1565b905080600360008785815181106108b2576108b161135a565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109449190611389565b9250508190555080836109579190611389565b9250816001019150808773ffffffffffffffffffffffffffffffffffffffff1686848151811061098a5761098961135a565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff167fc63b194ef2132e5904173b81b08d724b4a89cbea7cccc6faf99f5e2c33f2a68360405160405180910390a450610857565b50600081856109ed9190611326565b905060008114610a8b5780600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a839190611389565b925050819055505b505050505050565b6001600081905550565b610b1e8363a9059cbb60e01b8484604051602401610abc929190611502565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b23565b505050565b6000610b85826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610bea9092919063ffffffff16565b9050600081511115610be55780806020019051810190610ba59190611557565b610be4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdb906115f6565b60405180910390fd5b5b505050565b6060610bf98484600085610c02565b90509392505050565b606082471015610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90611688565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c709190611719565b60006040518083038185875af1925050503d8060008114610cad576040519150601f19603f3d011682016040523d82523d6000602084013e610cb2565b606091505b5091509150610cc387838387610ccf565b92505050949350505050565b60608315610d31576000835103610d2957610ce985610d44565b610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f9061177c565b60405180910390fd5b5b829050610d3c565b610d3b8383610d67565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610d7a5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dae91906117e0565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610dde81610dcb565b8114610de957600080fd5b50565b600081359050610dfb81610dd5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2c82610e01565b9050919050565b610e3c81610e21565b8114610e4757600080fd5b50565b600081359050610e5981610e33565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ead82610e64565b810181811067ffffffffffffffff82111715610ecc57610ecb610e75565b5b80604052505050565b6000610edf610db7565b9050610eeb8282610ea4565b919050565b600067ffffffffffffffff821115610f0b57610f0a610e75565b5b602082029050602081019050919050565b600080fd5b600080fd5b600060408284031215610f3c57610f3b610f21565b5b610f466040610ed5565b90506000610f5684828501610dec565b6000830152506020610f6a84828501610e4a565b60208301525092915050565b6000610f89610f8484610ef0565b610ed5565b90508083825260208201905060408402830185811115610fac57610fab610f1c565b5b835b81811015610fd55780610fc18882610f26565b845260208401935050604081019050610fae565b5050509392505050565b600082601f830112610ff457610ff3610e5f565b5b8135611004848260208601610f76565b91505092915050565b60008060006060848603121561102657611025610dc1565b5b600061103486828701610dec565b935050602061104586828701610e4a565b925050604084013567ffffffffffffffff81111561106657611065610dc6565b5b61107286828701610fdf565b9150509250925092565b6000806040838503121561109357611092610dc1565b5b60006110a185828601610e4a565b92505060206110b285828601610e4a565b9150509250929050565b6110c581610dcb565b82525050565b60006020820190506110e060008301846110bc565b92915050565b6000602082840312156110fc576110fb610dc1565b5b600061110a84828501610e4a565b91505092915050565b6000806040838503121561112a57611129610dc1565b5b600061113885828601610e4a565b925050602061114985828601610dec565b9150509250929050565b600061115e82610e01565b9050919050565b61116e81611153565b82525050565b60006020820190506111896000830184611165565b92915050565b6000602082840312156111a5576111a4610dc1565b5b600082013567ffffffffffffffff8111156111c3576111c2610dc6565b5b6111cf84828501610fdf565b91505092915050565b60008115159050919050565b6111ed816111d8565b82525050565b600060208201905061120860008301846111e4565b92915050565b600082825260208201905092915050565b7f496e76616c696420546f6b656e00000000000000000000000000000000000000600082015250565b6000611255600d8361120e565b91506112608261121f565b602082019050919050565b6000602082019050818103600083015261128481611248565b9050919050565b61129481610e21565b82525050565b60006020820190506112af600083018461128b565b92915050565b6000815190506112c481610dd5565b92915050565b6000602082840312156112e0576112df610dc1565b5b60006112ee848285016112b5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133182610dcb565b915061133c83610dcb565b9250828203905081811115611354576113536112f7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061139482610dcb565b915061139f83610dcb565b92508282019050808211156113b7576113b66112f7565b5b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006113f3601f8361120e565b91506113fe826113bd565b602082019050919050565b60006020820190508181036000830152611422816113e6565b9050919050565b600060608201905061143e600083018661128b565b61144b602083018561128b565b61145860408301846110bc565b949350505050565b600061146b82610dcb565b915061147683610dcb565b925082820261148481610dcb565b9150828204841483151761149b5761149a6112f7565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114dc82610dcb565b91506114e783610dcb565b9250826114f7576114f66114a2565b5b828204905092915050565b6000604082019050611517600083018561128b565b61152460208301846110bc565b9392505050565b611534816111d8565b811461153f57600080fd5b50565b6000815190506115518161152b565b92915050565b60006020828403121561156d5761156c610dc1565b5b600061157b84828501611542565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006115e0602a8361120e565b91506115eb82611584565b604082019050919050565b6000602082019050818103600083015261160f816115d3565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061167260268361120e565b915061167d82611616565b604082019050919050565b600060208201905081810360008301526116a181611665565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156116dc5780820151818401526020810190506116c1565b60008484015250505050565b60006116f3826116a8565b6116fd81856116b3565b935061170d8185602086016116be565b80840191505092915050565b600061172582846116e8565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611766601d8361120e565b915061177182611730565b602082019050919050565b6000602082019050818103600083015261179581611759565b9050919050565b600081519050919050565b60006117b28261179c565b6117bc818561120e565b93506117cc8185602086016116be565b6117d581610e64565b840191505092915050565b600060208201905081810360008301526117fa81846117a7565b90509291505056fea2646970667358221220d79f3c1e7cd55401db30204a77cddcc08124c4005cd9433eb7769560194901ca64736f6c63430008110033";

type Web3LearnConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Web3LearnConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Web3Learn__factory extends ContractFactory {
  constructor(...args: Web3LearnConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Web3Learn> {
    return super.deploy(overrides || {}) as Promise<Web3Learn>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Web3Learn {
    return super.attach(address) as Web3Learn;
  }
  override connect(signer: Signer): Web3Learn__factory {
    return super.connect(signer) as Web3Learn__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Web3LearnInterface {
    return new utils.Interface(_abi) as Web3LearnInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Web3Learn {
    return new Contract(address, _abi, signerOrProvider) as Web3Learn;
  }
}
