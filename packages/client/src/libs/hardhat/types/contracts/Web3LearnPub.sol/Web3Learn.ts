/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Web3Learn {
  export type SplitStruct = {
    ratio: PromiseOrValue<BigNumberish>;
    payee: PromiseOrValue<string>;
  };

  export type SplitStructOutput = [BigNumber, string] & {
    ratio: BigNumber;
    payee: string;
  };
}

export interface Web3LearnInterface extends utils.Interface {
  functions: {
    "_checkRatio((uint256,address)[])": FunctionFragment;
    "_getReward(address,address)": FunctionFragment;
    "_isWhitelistedToken(address)": FunctionFragment;
    "addWhitelist(address)": FunctionFragment;
    "buy(uint256,address,(uint256,address)[])": FunctionFragment;
    "claimReward(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeWhitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_checkRatio"
      | "_getReward"
      | "_isWhitelistedToken"
      | "addWhitelist"
      | "buy"
      | "claimReward"
      | "owner"
      | "removeWhitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_checkRatio",
    values: [Web3Learn.SplitStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_isWhitelistedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      Web3Learn.SplitStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelist",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_checkRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_isWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelist",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,address,uint256,bool)": EventFragment;
    "SetSplit(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSplit"): EventFragment;
}

export interface BuyEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
  success: boolean;
}
export type BuyEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface SetSplitEventObject {
  sender: string;
  token: string;
  amount: BigNumber;
}
export type SetSplitEvent = TypedEvent<
  [string, string, BigNumber],
  SetSplitEventObject
>;

export type SetSplitEventFilter = TypedEventFilter<SetSplitEvent>;

export interface Web3Learn extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Web3LearnInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _checkRatio(
      splits: Web3Learn.SplitStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid_: boolean }>;

    _getReward(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { canClaimAmount_: BigNumber }>;

    _isWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isWhitelisted_: boolean }>;

    addWhitelist(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      splits: Web3Learn.SplitStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeWhitelist(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _checkRatio(
    splits: Web3Learn.SplitStruct[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  _getReward(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _isWhitelistedToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addWhitelist(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    splits: Web3Learn.SplitStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeWhitelist(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _checkRatio(
      splits: Web3Learn.SplitStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    _getReward(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addWhitelist(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      splits: Web3Learn.SplitStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeWhitelist(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Buy(address,address,uint256,bool)"(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      success?: null
    ): BuyEventFilter;
    Buy(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      success?: null
    ): BuyEventFilter;

    "SetSplit(address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): SetSplitEventFilter;
    SetSplit(
      sender?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): SetSplitEventFilter;
  };

  estimateGas: {
    _checkRatio(
      splits: Web3Learn.SplitStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getReward(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addWhitelist(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      splits: Web3Learn.SplitStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReward(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelist(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _checkRatio(
      splits: Web3Learn.SplitStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getReward(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isWhitelistedToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addWhitelist(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      splits: Web3Learn.SplitStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelist(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
