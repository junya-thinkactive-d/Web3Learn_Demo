/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Web3Learn,
  Web3LearnInterface,
} from "../../../contracts/DemoWeb3Learn.sol/Web3Learn";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "Buy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "SetSplit",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "ratio",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "payee",
            type: "address",
          },
        ],
        internalType: "struct Web3Learn.Split[]",
        name: "splits",
        type: "tuple[]",
      },
    ],
    name: "_checkRatio",
    outputs: [
      {
        internalType: "bool",
        name: "isValid_",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "_getReward",
    outputs: [
      {
        internalType: "uint256",
        name: "canClaimAmount_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "_isWhitelistedToken",
    outputs: [
      {
        internalType: "bool",
        name: "isWhitelisted_",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "addWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "ratio",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "payee",
            type: "address",
          },
        ],
        internalType: "struct Web3Learn.Split[]",
        name: "splits",
        type: "tuple[]",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimReard",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getBuyLists",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "removeWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600160008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b71806100696000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806381d8b2021161006657806381d8b202146101305780638da5cb5b1461014c578063d647fc241461016a578063f80f5dd51461019a578063fe537ca2146101b657610093565b80634be98f94146100985780636f804ca5146100c857806378c8cda7146100f857806380355aa114610114575b600080fd5b6100b260048036038101906100ad9190611026565b6101e6565b6040516100bf919061107f565b60405180910390f35b6100e260048036038101906100dd919061109a565b61026d565b6040516100ef9190611185565b60405180910390f35b610112600480360381019061010d919061109a565b6103a7565b005b61012e600480360381019061012991906111d3565b61045c565b005b61014a600480360381019061014591906113c1565b610524565b005b6101546107e8565b6040516101619190611465565b60405180910390f35b610184600480360381019061017f9190611480565b61080e565b60405161019191906114e4565b60405180910390f35b6101b460048036038101906101af919061109a565b610867565b005b6101d060048036038101906101cb919061109a565b61091c565b6040516101dd91906114e4565b60405180910390f35b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60606000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008167ffffffffffffffff8111156102d2576102d1611229565b5b6040519080825280602002602001820160405280156103005781602001602082028036833780820191505090505b50905060005b8281101561039c57600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061035f5761035e6114ff565b5b906000526020600020015482828151811061037d5761037c6114ff565b5b60200260200101818152505080806103949061155d565b915050610306565b508092505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040157600080fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610464610972565b61046e33836101e6565b81111561047a57600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461050691906115a5565b925050819055506105188233836109c1565b610520610a47565b5050565b61052c610972565b736ee96fa35b26d3f8cd249a4cba6617d8189bfb5d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590611636565b60405180910390fd5b6105b78161080e565b6105c057600080fd5b600030905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016106009190611665565b602060405180830381865afa15801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190611695565b90506106703383888773ffffffffffffffffffffffffffffffffffffffff16610a51909392919063ffffffff16565b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016106ab9190611665565b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611695565b9050600082826106fc91906115a5565b9050610709868287610ada565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020879080600181540180825580915050600190039060005260206000200160009091909190915055878673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f251183b9c2b842c80f376686f0f21acd10da77772f5eef8eb0de739a35220c3060016040516107ce91906114e4565b60405180910390a4505050506107e2610a47565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080825190506000805b8281101561085857848181518110610834576108336114ff565b5b6020026020010151600001518261084b91906116c2565b9150806001019050610819565b50612710811492505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108c157600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6002600054036109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae90611742565b60405180910390fd5b6002600081905550565b610a428363a9059cbb60e01b84846040516024016109e0929190611762565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d20565b505050565b6001600081905550565b610ad4846323b872dd60e01b858585604051602401610a729392919061178b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d20565b50505050565b6000815190506000805b82811015610c6b576000612710858381518110610b0457610b036114ff565b5b60200260200101516000015187610b1b91906117c2565b610b259190611833565b90508060036000878581518110610b3f57610b3e6114ff565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bd191906116c2565b925050819055508083610be491906116c2565b9250808773ffffffffffffffffffffffffffffffffffffffff16868481518110610c1157610c106114ff565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff167fc63b194ef2132e5904173b81b08d724b4a89cbea7cccc6faf99f5e2c33f2a68360405160405180910390a481600101915050610ae4565b5060008185610c7a91906115a5565b905060008114610d185780600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d1091906116c2565b925050819055505b505050505050565b6000610d82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610de79092919063ffffffff16565b9050600081511115610de25780806020019051810190610da29190611890565b610de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd89061192f565b60405180910390fd5b5b505050565b6060610df68484600085610dff565b90509392505050565b606082471015610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b906119c1565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e6d9190611a52565b60006040518083038185875af1925050503d8060008114610eaa576040519150601f19603f3d011682016040523d82523d6000602084013e610eaf565b606091505b5091509150610ec087838387610ecc565b92505050949350505050565b60608315610f2e576000835103610f2657610ee685610f41565b610f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1c90611ab5565b60405180910390fd5b5b829050610f39565b610f388383610f64565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610f775781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fab9190611b19565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ff382610fc8565b9050919050565b61100381610fe8565b811461100e57600080fd5b50565b60008135905061102081610ffa565b92915050565b6000806040838503121561103d5761103c610fbe565b5b600061104b85828601611011565b925050602061105c85828601611011565b9150509250929050565b6000819050919050565b61107981611066565b82525050565b60006020820190506110946000830184611070565b92915050565b6000602082840312156110b0576110af610fbe565b5b60006110be84828501611011565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110fc81611066565b82525050565b600061110e83836110f3565b60208301905092915050565b6000602082019050919050565b6000611132826110c7565b61113c81856110d2565b9350611147836110e3565b8060005b8381101561117857815161115f8882611102565b975061116a8361111a565b92505060018101905061114b565b5085935050505092915050565b6000602082019050818103600083015261119f8184611127565b905092915050565b6111b081611066565b81146111bb57600080fd5b50565b6000813590506111cd816111a7565b92915050565b600080604083850312156111ea576111e9610fbe565b5b60006111f885828601611011565b9250506020611209858286016111be565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61126182611218565b810181811067ffffffffffffffff821117156112805761127f611229565b5b80604052505050565b6000611293610fb4565b905061129f8282611258565b919050565b600067ffffffffffffffff8211156112bf576112be611229565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156112f0576112ef6112d5565b5b6112fa6040611289565b9050600061130a848285016111be565b600083015250602061131e84828501611011565b60208301525092915050565b600061133d611338846112a4565b611289565b905080838252602082019050604084028301858111156113605761135f6112d0565b5b835b81811015611389578061137588826112da565b845260208401935050604081019050611362565b5050509392505050565b600082601f8301126113a8576113a7611213565b5b81356113b884826020860161132a565b91505092915050565b600080600080608085870312156113db576113da610fbe565b5b60006113e9878288016111be565b94505060206113fa878288016111be565b935050604061140b87828801611011565b925050606085013567ffffffffffffffff81111561142c5761142b610fc3565b5b61143887828801611393565b91505092959194509250565b600061144f82610fc8565b9050919050565b61145f81611444565b82525050565b600060208201905061147a6000830184611456565b92915050565b60006020828403121561149657611495610fbe565b5b600082013567ffffffffffffffff8111156114b4576114b3610fc3565b5b6114c084828501611393565b91505092915050565b60008115159050919050565b6114de816114c9565b82525050565b60006020820190506114f960008301846114d5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061156882611066565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361159a5761159961152e565b5b600182019050919050565b60006115b082611066565b91506115bb83611066565b92508282039050818111156115d3576115d261152e565b5b92915050565b600082825260208201905092915050565b7f496e76616c696420546f6b656e00000000000000000000000000000000000000600082015250565b6000611620600d836115d9565b915061162b826115ea565b602082019050919050565b6000602082019050818103600083015261164f81611613565b9050919050565b61165f81610fe8565b82525050565b600060208201905061167a6000830184611656565b92915050565b60008151905061168f816111a7565b92915050565b6000602082840312156116ab576116aa610fbe565b5b60006116b984828501611680565b91505092915050565b60006116cd82611066565b91506116d883611066565b92508282019050808211156116f0576116ef61152e565b5b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061172c601f836115d9565b9150611737826116f6565b602082019050919050565b6000602082019050818103600083015261175b8161171f565b9050919050565b60006040820190506117776000830185611656565b6117846020830184611070565b9392505050565b60006060820190506117a06000830186611656565b6117ad6020830185611656565b6117ba6040830184611070565b949350505050565b60006117cd82611066565b91506117d883611066565b92508282026117e681611066565b915082820484148315176117fd576117fc61152e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061183e82611066565b915061184983611066565b92508261185957611858611804565b5b828204905092915050565b61186d816114c9565b811461187857600080fd5b50565b60008151905061188a81611864565b92915050565b6000602082840312156118a6576118a5610fbe565b5b60006118b48482850161187b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611919602a836115d9565b9150611924826118bd565b604082019050919050565b600060208201905081810360008301526119488161190c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006119ab6026836115d9565b91506119b68261194f565b604082019050919050565b600060208201905081810360008301526119da8161199e565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611a155780820151818401526020810190506119fa565b60008484015250505050565b6000611a2c826119e1565b611a3681856119ec565b9350611a468185602086016119f7565b80840191505092915050565b6000611a5e8284611a21565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611a9f601d836115d9565b9150611aaa82611a69565b602082019050919050565b60006020820190508181036000830152611ace81611a92565b9050919050565b600081519050919050565b6000611aeb82611ad5565b611af581856115d9565b9350611b058185602086016119f7565b611b0e81611218565b840191505092915050565b60006020820190508181036000830152611b338184611ae0565b90509291505056fea26469706673582212203153a96538f724c68755b7e7248ad478a1455f8b7ddfa5402790775742efdac164736f6c63430008110033";

type Web3LearnConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Web3LearnConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Web3Learn__factory extends ContractFactory {
  constructor(...args: Web3LearnConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Web3Learn> {
    return super.deploy(overrides || {}) as Promise<Web3Learn>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Web3Learn {
    return super.attach(address) as Web3Learn;
  }
  override connect(signer: Signer): Web3Learn__factory {
    return super.connect(signer) as Web3Learn__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Web3LearnInterface {
    return new utils.Interface(_abi) as Web3LearnInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Web3Learn {
    return new Contract(address, _abi, signerOrProvider) as Web3Learn;
  }
}
